
global config git

git config --global user.name frank
git config --global user.email fan.gunner@outlook.com



git init
// initialized empty Git repository



git add gitcmd [file2, file3...]
// add files to stage

git commit -m "git commands"
// commit stage files to branch

git status
// On branch master
// nothing to commit, working directory clean

git diff

git log
git log --pretty=oneline

git reset --hard HEAD^
// go back to last commit, use HEAD^^, 2 version ago, HEAD~100, 100 version ago

git reflog
// log for each comments
// git log just the commit log


git checkout -- filename
// 1. if not added, abandom all changes
// 2. if added, but modified, then abandom all modifications, only keep the added files

git reset HEAD filename
// added, but not commit, then abandom all added but not committed changes
// the file is still showing up modified, use git checkout -- filename to abandom the modifications



// to delete file, first rm filename, then
git rm filename
git commit

// to revert the delete
git checkout -- filedeleted


// ssh, if there is no .ssh/id_rsa and .ssh/id_rsa.pub, do this
// ssh-keygen -t rsa -C fan.gunner@outlook.com
// id_rsa is private key, don't tell others
// id_rsa.pub is public key, can be shared

git remote add origin https://github.com/faneverest/repository.git
git push -u origin master
// -u link the local and remote repository, in future, we can use
git push  origin master
// or
git remote -v // display more info (push/fetch address)
git push origin master
git push origin newbranch


//clone remote
git clone git@github.com:faneverest/QuantAnalytics.git // this only clones master
git checkout -b newbranch origin/newbranch  // clone remote newbranch to local
git push origin newbranch // sync to remote newbranch


// branch
git checkout -b newbranch
// now head points to newbranch

git branch
// list all branches

// now git add/commit to the newbranch, not master

git checkout master
// now switch HEAD pointer back to master branch

git merge newbranch
// merge branches, now HEAD point to newbranch

// usually git will use fast-forward mode to merge branches. 
// this means when delete the newbranch, the newbranch info will lost
// to disable the fast forward mode merge, we need make 'merge' a new commitL

git merge --no-ff -m "new commit information" newbranch 


git branch -d newbranch
// delete newbranch

// to fix conflict, add/commit then merge
git log --graph --pretty=oneline --abbrev-commit
// check the merge graphics

// when working in remote, if other changes the branch, your copy is old, then you must pull and fix potential conflict
git pull // if error as no tracking infomation, means needs to set up:
git branch --set-upstream branch-name origin/branch-name
git pull // pull again


// when in the middle of working on one branch, we want to switch to another branch,
// and cache the working status of this branch before switching
git stash

git checkout master
git checkout -b anotherbranch
git add
git commit -m "works on anotherbranch"

git checkout master
git merge --no-ff -m "merge anotherbranch" anotherbranch
git branch -d anotherbranch

git checkout newbranch // get back to the stashed branch
git status      // nothing to commit, where is the changes?
git stash list      // check stash stack

git stash apply      // retrieve the changes
git stash drop      // delete stash

// or
git stash pop       // retrieve and drop

// or
git stash apply stash@{0}   // access 0th stash, use git stash list check item id


// if one branch needs to be deleted before merge, we need to use -D
git branch -D branchDelBeforeMerge


// tag, is nickname for snapshot

// switch to branch needs to be tagged
git branch
git checkout master

git tag v1.0 // tag the head
git log --pretty=oneline --abbrev=commit
git tag someid v0.9
git tag -a v0.1 - m "version 0.1 released" <id>
git tag -s v0.2 -m "signed, cannot forge" <id>

git tag -d v0.1 // delete tag

git push origin <tag> // push to remote
git push origin --tags  // push all tags to remote 

// delete remote tags, first delete in local, then push
git tag -d <tag>
git push origin :refs/tags/<tag>

git tag // check all tags
git show <tagname> check tag information


// use github
// click "fork" to clone one repository in own username, so that you can clone:
git clone xxx
// want to contribute your changes, fire one pull request


// git config
git config --global color.ui true
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch

git config --global alias.unstage 'reset HEAD'
git config --global alias.last 'log -1'

// try git lg
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

// --global for user, without it for current repository only
// check .git/config under each repository for repository specific configurations
// check ~/home/.gitconfig for user level configurations


//.gitignore

# Windows
Thumbs.db
Desktop.init

# Python
*.pyc
*.so

# My configurations:
xx.xxx

git add .gitignore
git commit

// force to add ignored files
git add -f xxx.xx

// check which rule triggered ignore xx.xx
git check-ignore -v xx.xx

